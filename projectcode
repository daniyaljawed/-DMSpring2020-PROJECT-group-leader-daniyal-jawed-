namespace ProjectDMby63155
{
    class Execute
    {
        stackno2 for array stack;
        public Execute(int Length) {

            stack = new stackno2 for array(Length);
        }
        
        public string Result(string postfixExpression, int[] setA, int[] setB, int[] setC, int[] Universe)
        {
            int postfixLength = postfixExpression.Length;
            for (int i = 0; i < postfixLength; i++)
            {
                if (postfixExpression[i] == 'A' || postfixExpression[i] == 'B' || postfixExpression[i] == 'C')
                {
                    if (postfixExpression[i] == 'A')
                    {
                        stack.Push(setA);
                    }
                    else if (postfixExpression[i] == 'B')
                    {
                        stack.Push(setB);
                    }
                    else if (postfixExpression[i] == 'C')
                    {
                        stack.Push(setC);
                    }
                }
                else if (postfixExpression[i] == '⋃' || postfixExpression[i] == '⋂' || postfixExpression[i] == '`' || postfixExpression[i] == '-')
                {
                    if (postfixExpression[i] == '`')
                    {
                        int[] Array1 = Universe;
                        int[] Array2 = stack.Pop();
                        int[] result = Preform(postfixExpression[i], Array1, Array2);
                        stack.Push(result);
                    }
                    else
                    {
                        int[] Array2 = stack.Pop();
                        int[] Array1 = stack.Pop();
                        int[] result = Preform(postfixExpression[i], Array1, Array2);
                        stack.Push(result);
                    }
                }
            }

            int[] evaluated = stack.Pop();
            string Evaluated = "";
            for (int i = 0; i < evaluated.Length; i++)
            {
                if (evaluated[i] == 0)
                {
                    break;
                }
                else
                {
                    Evaluated += " " + Convert.ToString(evaluated[i]);
                }
            }
            return Evaluated;
        }
        int[] Preform(char Operator, int[] Array1, int[] Array2)
        {
            int[] temp = new int[0];
            sort(ref Array1);
            sort(ref Array2);
            int LA1 = Array1.Length;
            int LA2 = Array2.Length;
            if (Operator == '⋃')
            {
                return (Union(Array1, Array2, LA1, LA2));
                
            }
            else if (Operator == '⋂')
            {
                return (Intersection(Array1, Array2, LA1, LA2));
            }
            else if (Operator == '`' || Operator == '-')
            {
                return(Difference(Array1,Array2,LA1,LA2));
            }
            else
            {
                return temp;
            }
        }

        // mtd uni

        int[] Union(int[] Array1, int[] Array2, int LA1, int LA2)
        {
            int[] result = new int[LA1 + LA2];
            int index = 0, i = 0, j = 0;
            while (i < LA1 && j < LA2)
            {
                if (Array1[i] < Array2[j])
                {
                    if (Array1[i] != 0)
                    {
                        result[index++] = Array1[i++];        
                    }
                    else
                    {
                        i++;
                    }
                }
                else if (Array2[j] < Array1[i])
                {
                    if (Array2[j] != 0)
                    {
                        result[index++] = Array2[j++];
                    }
                    else
                    {
                        j++;
                    }
                }
                else
                {
                    if (Array2[j] != 0)
                    {
                        result[index++] = Array2[j++];
                        i++;
                    }
                    else
                    {
                        j++; i++;
                    }
                }
                
            }
            while (i < LA1)
            {
                if (Array1[i] != 0)
                {
                    result[index++] = Array1[i++];     
                }
                else
                {
                    i++;
                }
            }
            while (j < LA2)
            {
                if (Array2[j] != 0)
                {
                    result[index++] = Array2[j++];
                }
                else
                {
                    j++;
                }
            }
            return result;
        }
        static void sort(ref int[] Arr) {
            int n = Arr.Length;
            for (int i = 0; i < n - 1 ; i++)
            {
                int min = i;
                for (int j = i + 1; j < n; j++)
                {
                    if (Arr[j] < Arr[min])
                    {
                        min = j;
                    }
                    int temp = Arr[min];
                    Arr[min] = Arr[i];
                    Arr[i] = temp;
                }
            }
        }
        //mtd Ints 



        int[] Intersection(int[] Array1, int[] Array2, int LA1, int LA2)
        { 

            int[] result = new int[LA1 + LA2];
            int index = 0, i = 0, j = 0;
          
            while (i < LA1 && j  < LA2)
            {
                if (Array1[i] < Array2[j])
                {
                    i++;
                }
                else if (Array2[j] < Array1[i])
                {
                    j++;
                }
                else
                {
                    result[index++] = Array2[j++];
                    i++;
                }
            }
            return result; 
        }
        //Mtd Diff
        int[] Difference(int[] Array1, int[] Array2, int LA1, int LA2)
        {
            int[] result = new int[LA1 + LA2];
            int i = 0, j = 0, index = 0;
            bool fg = true;
            while (i < LA1)
            {
                for (j = 0; j < LA2; )
                {
                    if (Array1[i] == Array2[j])
                    {
                        fg = false;
                        break;
                    }
                    j++;
                }
                if (fg == true)
                {
                    result[index] = Array1[i];
                    index++;
                }
                fg = true;
                i++;
            }
            return result;
        }
    }
}


// second class working for capaity for stack and array

namespace ProjectDMby63155
{
    class stackno2forarray
    {
        int[][]array;
        int top;
        int maxstk;
        public stackno2forarray(int capacity)
        {
            top = -1;
            maxstk = capacity;
            array = new int[maxstk][];
        }
        public bool isEmpty() 
        {
            if (top == -1)
                return true;
            else
                return false;
        }
        public bool isFull()
        {
            if (top == maxstk - 1)
                return true;
            else
                return false;
        }
        public void Push(int[] arr)
        {
            if (!isFull()) 
            {
                top++;
                array[top] = arr;
            }
        }
        public int[] Pop()
        {
            return array[top--];
        }
    }
}


//

namespace ProjectDMby63155
{
    class Stackno1

    {
        char[] array;
        int top;
        int maximumstack;
        public Stackno1(int capacity)
        {
            top = -1;
            maximumstack = capacity;
            array = new char[maximumstack];
        }
        public bool isEmpty() 
        {
            if (top == -1)
                return true;
            else
                return false;
        }
        public bool isFull()
        {
            if (top == maximumstack - 1)
                return true;
            else
                return false;
        }
        public void Push(char element)
        {
            if (!isFull()) 
            {
                top++;
                array[top] = element;
            }
        }
        public char Pop()
        {
            char element = array[top];
            top--;
            return element;
        }
    }
}



///using System.Threading.Tasks;

namespace ProjectDMby63155

{

  class InfixToPostExpression
    {
        

        public string PostfixExpression(string infixExpression)
        {
            Stackno1 stack = new Stackno1(infixExpression.Length);
            int Length = infixExpression.Length;
            stack.Push('(');
            char[] Postfix = new char[Length];
            infixExpression += ')';
            int CountInfix = 0;
            int CountPostfix = 0;
            while (!stack.isEmpty())
            {
                char chacracter  = infixExpression[CountInfix++];
                if (chacracter  != '⋃' && chacracter  != '⋂' && chacracter  != '-' && chacracter  != '`' && chacracter  != '(' && chacracter  != ')')
                {
                    Postfix[CountPostfix++] = chacracter ;
                }
                else if (chacracter  == '(')
                {
                    stack.Push(chacracter );
                }
                else if (chacracter  == '⋃' || chacracter  == '⋂')
                {
                    while (true)
                    {
                        char item = stack.Pop();
                        if (item != '(')
                        {
                            Postfix[CountPostfix++] = item;
                        }
                        else
                        {
                            stack.Push(item);
                            break;
                        }
                    }
                    stack.Push(chacracter );
                }
                else if (chacracter  == '-')
                {
                    while (true)
                    {
                        char item = stack.Pop();
                        if (item == '-')
                        {
                            Postfix[CountPostfix++] = item;
                        }
                        else
                        {
                            stack.Push(item);
                            break;
                        }
                    }
                    stack.Push(chacracter );
                }
                else if (chacracter  == '`')
                {
                    while (true)
                    {
                        char item = stack.Pop();
                        if (item == '`')
                        {
                            Postfix[CountPostfix++] = item;
                        }
                        else
                        {
                            stack.Push(item);
                            break;
                        }
                    }
                    stack.Push(chacracter );
                }
                else if (chacracter  == ')')
                {
                    char item;
                    while ((item = stack.Pop()) != '(')
                    {
                        Postfix[CountPostfix++] = item;
                    }
                }

            }
            string dani = "";
            for (int i = 0; i < Postfix.Length; i++)
            {
                dani += Convert.ToString(Postfix[i]);
            }
            return dani;
        }
    }
